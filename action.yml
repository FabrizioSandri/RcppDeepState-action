name: 'RcppDeepState'
author: 'Fabrizio Sandri'
description: 'This Action runs RcppDeepState in any Rcpp-based projects hosted on GitHub'
inputs:
  fail_ci_if_error:
    description: 'Specify if CI pipeline should fail when RcppDeepState finds errors'
    require: false
    default: 'false'
  location:  
    description: 'Location of the package if not in the root of the repository'
    required: false
    default: '/'
  seed:  
    description: 'Seed used for deterministic fuzz testing and reproduce the analysis results'
    required: false
    default: '-1'
  time_limit:
    description: "Fuzzing phase's duration in seconds"
    required: false
    default: '2'
  max_inputs:
    description: 'Number of inputs generated in the fuzzing phase to analyze'
    required: false
    default: '3'
  comment:
    description: 'Print the analysis results as a comment in pull request'
    require: false
    default: 'false'
  verbose:
    description: 'Enables verbose logging of RcppDeepState'
    require: false
    default: 'false'


runs:
  using: "composite"
  steps:

    - uses: actions/checkout@v2 
      with:
        repository: FabrizioSandri/RcppDeepState-action
        path: RcppDeepState-action

    - name: Analyze the package with RcppDeepState 
      id: rcppdeepstate
      uses: ./RcppDeepState-action/docker
      with:
        fail_ci_if_error: ${{ inputs.fail_ci_if_error }}
        location: ${{ inputs.location }}
        seed: ${{ inputs.seed }}
        time_limit: ${{ inputs.time_limit }}
        max_inputs: ${{ inputs.max_inputs }}
        verbose: ${{ inputs.verbose }}

    - name: Zip artifact before upload
      if: failure() || inputs.fail_ci_if_error == 'false'
      run: |
        zip -r -q outputs.zip ./${{ inputs.location }}/inst/testfiles
      shell: bash

    - uses: actions/upload-artifact@v3
      if: failure() || inputs.fail_ci_if_error == 'false'
      with:
        name: Test results
        path: outputs.zip

    - name: Comment on pull requests
      uses: actions/github-script@v6
      if: |
        always() && ( 
          inputs.comment == 'true' || ( 
            inputs.comment == 'failure' && steps.rcppdeepstate.outputs.errors == 'true'
          ) 
        )
      with:
        script: |
          if (context.issue.number) {
              const fs = require("fs");
              const report = fs.readFileSync('./report.md', {encoding:'utf8', flag:'r'});
              
              const response = await github.rest.issues.listComments({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number
              })

              const comments = response.data;

              // Find the comment generated by RcppDeepState-action
              const comment_identifier = "<!-- RcppDeepState-action comment-->"
              const action_comment = comments.find(comment => comment.body.includes(comment_identifier))
              const new_comment_body = `${comment_identifier}\n## RcppDeepState Report\n${report}`

              if (action_comment) {
                  await github.rest.issues.updateComment({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      comment_id: action_comment.id,
                      body: new_comment_body
                  })
              } else {
                  await github.rest.issues.createComment({
                      issue_number: context.issue.number,
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      body: new_comment_body
                  })
              }
              
          }